name: Build Resume (TinyTeX Optimized)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Emacs
      uses: purcell/setup-emacs@master
      with:
        version: 29.1
        
    - name: Cache TinyTeX and packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.TinyTeX
          ~/bin
        key: ${{ runner.os }}-tinytex-${{ hashFiles('**/resume.org', '**/cover-letter.org') }}
        restore-keys: |
          ${{ runner.os }}-tinytex-
          
    - name: Install TinyTeX
      run: |
        # Install TinyTeX (much smaller than full TeXLive)
        wget -qO- "https://yihui.org/tinytex/install-bin-unix.sh" | sh
        echo "$HOME/bin" >> $GITHUB_PATH
        export PATH="$HOME/bin:$PATH"
        
        # Install only the packages we actually need
        tlmgr install \
          geometry xcolor titlesec enumitem fontawesome5 \
          tools amsfonts fancyhdr lm \
          amsmath hyperref graphics wrapfig rotating \
          ulem capt-of latex-bin \
          latex epstopdf-pkg etoolbox
          
    - name: Cache Emacs packages
      uses: actions/cache@v4
      with:
        path: ~/.emacs.d/elpa
        key: ${{ runner.os }}-emacs-${{ hashFiles('**/resume.org') }}
        restore-keys: |
          ${{ runner.os }}-emacs-
          
    - name: Install org-mode and dependencies
      run: |
        emacs --batch --eval "(require 'package)" \
              --eval "(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)" \
              --eval "(package-initialize)" \
              --eval "(package-refresh-contents)" \
              --eval "(package-install 'org)" \
              --eval "(require 'ox-latex)" \
              --eval "(require 'ox-html)"
              
    - name: Create output directory
      run: mkdir -p dist
      
    - name: Export documents
      run: |
        export PATH="$HOME/bin:$PATH"
        
        # Export resume
        emacs --batch resume.org \
              --eval "(require 'ox-latex)" \
              --eval "(setq org-confirm-babel-evaluate nil)" \
              --eval "(setq org-latex-pdf-process '(\"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f\" \"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f\"))" \
              --eval "(org-latex-export-to-pdf)" \
              --eval "(org-html-export-to-html)"
              
        # Export cover letter
        emacs --batch cover-letter.org \
              --eval "(require 'ox-latex)" \
              --eval "(setq org-confirm-babel-evaluate nil)" \
              --eval "(setq org-latex-pdf-process '(\"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f\" \"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f\"))" \
              --eval "(org-latex-export-to-pdf)" \
              --eval "(org-html-export-to-html)"
              
        # Copy to dist directory
        cp resume.pdf dist/ShreyasRagavan-Resume.pdf
        cp resume.html dist/ShreyasRagavan-Resume.html
        cp cover-letter.pdf dist/ShreyasRagavan-CoverLetter.pdf
        cp cover-letter.html dist/ShreyasRagavan-CoverLetter.html
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: resume-documents
        path: |
          dist/*.pdf
          dist/*.html
        retention-days: 90
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        
    - name: Create release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Resume Build ${{ github.run_number }}
        files: |
          dist/ShreyasRagavan-Resume.pdf
          dist/ShreyasRagavan-CoverLetter.pdf
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}